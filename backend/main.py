from fastapi import FastAPI, Depends, HTTPException, status, Query, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from sqlalchemy.orm import Session
from typing import List, Optional
from datetime import datetime
import os
import uvicorn

from models import init_db, get_db, Task, Reception, TaskHistory, UserFilter, create_sample_data, log_task_change, archive_old_tasks
from schemas import (
    TaskCreate, TaskUpdate, TaskBulkUpdate, Task as TaskSchema,
    ReceptionCreate, Reception as ReceptionSchema,
    TaskHistory as TaskHistorySchema,
    UserFilterCreate, UserFilter as UserFilterSchema,
    ArchiveResponse, ErrorResponse
)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º API",
    description="REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è–º–∏, –ø—Ä–∏–µ–º–∫–æ–π –∏ –∞—Ä—Ö–∏–≤–æ–º",
    version="1.0.0"
)

# CORS middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥)
if os.path.exists("../frontend"):
    app.mount("/static", StaticFiles(directory="../frontend"), name="static")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_event():
    init_db()
    create_sample_data()
    print("üöÄ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –æ—Ç–¥–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
@app.get("/")
async def read_root():
    if os.path.exists("../frontend/index.html"):
        return FileResponse("../frontend/index.html")
    return {"message": "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º API", "docs": "/docs"}

# –ó–ê–î–ê–ù–ò–Ø
@app.get("/api/tasks", response_model=List[TaskSchema])
async def get_tasks(
    archived: bool = Query(False, description="–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"),
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é"),
    status: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    priority: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"),
    responsible: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É"),
    overdue: Optional[bool] = Query(None, description="–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è"),
    sort_by: str = Query("created_date", description="–ü–æ–ª–µ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
    sort_order: str = Query("desc", description="–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (asc/desc)"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    query = db.query(Task).filter(Task.archived == archived)
    
    # –ü–æ–∏—Å–∫
    if search:
        query = query.filter(
            (Task.name.contains(search)) |
            (Task.description.contains(search)) |
            (Task.number.contains(search)) |
            (Task.responsible.contains(search))
        )
    
    # –§–∏–ª—å—Ç—Ä—ã
    if status:
        query = query.filter(Task.status == status)
    if priority:
        query = query.filter(Task.priority == priority)
    if responsible:
        query = query.filter(Task.responsible.contains(responsible))
    
    # –§–∏–ª—å—Ç—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    if overdue:
        query = query.filter(
            Task.due_date < datetime.now(),
            Task.status != "–≥–æ—Ç–æ–≤–æ"
        )
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    if hasattr(Task, sort_by):
        column = getattr(Task, sort_by)
        if sort_order.lower() == "asc":
            query = query.order_by(column.asc())
        else:
            query = query.order_by(column.desc())
    
    return query.all()

@app.get("/api/tasks/{task_id}", response_model=TaskSchema)
async def get_task(task_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID"""
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    return task

@app.post("/api/tasks", response_model=TaskSchema)
async def create_task(task: TaskCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
    existing_task = db.query(Task).filter(Task.number == task.number).first()
    if existing_task:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"–ó–∞–¥–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º '{task.number}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    db_task = Task(**task.dict())
    db.add(db_task)
    db.commit()
    db.refresh(db_task)
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    log_task_change(
        db, db_task.id, 
        "–°–æ–∑–¥–∞–Ω–æ", 
        f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ '{task.name}'"
    )
    
    return db_task

@app.put("/api/tasks/{task_id}", response_model=TaskSchema)
async def update_task(task_id: int, task_update: TaskUpdate, db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if not db_task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    old_values = {
        "name": db_task.name,
        "description": db_task.description,
        "status": db_task.status,
        "priority": db_task.priority,
        "responsible": db_task.responsible,
        "due_date": db_task.due_date,
        "attachments": db_task.attachments
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    update_data = task_update.dict(exclude_unset=True)
    for field, value in update_data.items():
        setattr(db_task, field, value)
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–≥–æ—Ç–æ–≤–æ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if task_update.status == "–≥–æ—Ç–æ–≤–æ" and old_values["status"] != "–≥–æ—Ç–æ–≤–æ":
        db_task.completed_date = datetime.now()
    
    db_task.updated_date = datetime.now()
    db.commit()
    db.refresh(db_task)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for field, new_value in update_data.items():
        old_value = old_values.get(field)
        if old_value != new_value:
            log_task_change(
                db, task_id,
                "–û–±–Ω–æ–≤–ª–µ–Ω–æ",
                f"–ü–æ–ª–µ '{field}' –∏–∑–º–µ–Ω–µ–Ω–æ: '{old_value}' ‚Üí '{new_value}'",
                field_name=field,
                old_value=str(old_value) if old_value is not None else "",
                new_value=str(new_value) if new_value is not None else "",
                user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                can_revert=True
            )
    
    return db_task

@app.delete("/api/tasks/{task_id}")
async def delete_task(task_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"""
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if not db_task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    task_name = db_task.name
    db.delete(db_task)
    db.commit()
    
    return {"message": f"–ó–∞–¥–∞–Ω–∏–µ '{task_name}' —É–¥–∞–ª–µ–Ω–æ"}

# –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò
@app.put("/api/tasks/bulk-update")
async def bulk_update_tasks(bulk_update: TaskBulkUpdate, db: Session = Depends(get_db)):
    """–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    if not bulk_update.task_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è
    tasks = db.query(Task).filter(Task.id.in_(bulk_update.task_ids)).all()
    if not tasks:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        )
    
    updated_count = 0
    update_data = bulk_update.dict(exclude={'task_ids'}, exclude_unset=True)
    
    for task in tasks:
        old_values = {}
        changes = []
        
        for field, new_value in update_data.items():
            if hasattr(task, field):
                old_value = getattr(task, field)
                old_values[field] = old_value
                
                if old_value != new_value:
                    setattr(task, field, new_value)
                    changes.append(f"{field}: '{old_value}' ‚Üí '{new_value}'")
                    
                    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ "–≥–æ—Ç–æ–≤–æ", —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    if field == "status" and new_value == "–≥–æ—Ç–æ–≤–æ" and old_value != "–≥–æ—Ç–æ–≤–æ":
                        task.completed_date = datetime.now()
        
        if changes:
            task.updated_date = datetime.now()
            updated_count += 1
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            log_task_change(
                db, task.id,
                "–ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
                f"–ò–∑–º–µ–Ω–µ–Ω–∏—è: {', '.join(changes)}",
                user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            )
    
    db.commit()
    
    return {
        "message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {updated_count}",
        "updated_count": updated_count
    }

@app.delete("/api/tasks/bulk-delete")
async def bulk_delete_tasks(task_ids: List[int], db: Session = Depends(get_db)):
    """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π"""
    if not task_ids:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ù–µ —É–∫–∞–∑–∞–Ω—ã ID –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        )
    
    tasks = db.query(Task).filter(Task.id.in_(task_ids)).all()
    if not tasks:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        )
    
    deleted_count = len(tasks)
    task_names = [task.name for task in tasks]
    
    for task in tasks:
        db.delete(task)
    
    db.commit()
    
    return {
        "message": f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {deleted_count}",
        "deleted_count": deleted_count,
        "deleted_tasks": task_names
    }

# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –°–ß–ï–¢–ß–ò–ö–ò
@app.get("/api/tasks-stats")
async def get_tasks_stats(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–¥–∞–Ω–∏—è–º"""
    from sqlalchemy import func
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tasks = db.query(Task).filter(Task.archived == False).count()
    
    # –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_stats = db.query(
        Task.status,
        func.count(Task.id).label('count')
    ).filter(Task.archived == False).group_by(Task.status).all()
    
    # –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
    priority_stats = db.query(
        Task.priority,
        func.count(Task.id).label('count')
    ).filter(Task.archived == False).group_by(Task.priority).all()
    
    # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    overdue_count = db.query(Task).filter(
        Task.archived == False,
        Task.due_date < datetime.now(),
        Task.status != "–≥–æ—Ç–æ–≤–æ"
    ).count()
    
    return {
        "total_tasks": total_tasks,
        "overdue_count": overdue_count,
        "status_stats": {stat.status: stat.count for stat in status_stats},
        "priority_stats": {stat.priority: stat.count for stat in priority_stats}
    }

# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –§–ò–õ–¨–¢–†–´
@app.get("/api/filters", response_model=List[UserFilterSchema])
async def get_user_filters(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã"""
    return db.query(UserFilter).order_by(UserFilter.created_date.desc()).all()

@app.post("/api/filters", response_model=UserFilterSchema)
async def create_user_filter(filter_data: UserFilterCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"""
    db_filter = UserFilter(**filter_data.dict())
    db.add(db_filter)
    db.commit()
    db.refresh(db_filter)
    return db_filter

@app.delete("/api/filters/{filter_id}")
async def delete_user_filter(filter_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä"""
    db_filter = db.query(UserFilter).filter(UserFilter.id == filter_id).first()
    if not db_filter:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
    
    filter_name = db_filter.name
    db.delete(db_filter)
    db.commit()
    
    return {"message": f"–§–∏–ª—å—Ç—Ä '{filter_name}' —É–¥–∞–ª–µ–Ω"}

# –û–¢–ö–ê–¢ –ò–ó–ú–ï–ù–ï–ù–ò–ô
@app.post("/api/tasks/{task_id}/revert/{history_id}")
async def revert_task_change(task_id: int, history_id: int, db: Session = Depends(get_db)):
    """–û—Ç–∫–∞—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
    history = db.query(TaskHistory).filter(
        TaskHistory.id == history_id,
        TaskHistory.task_id == task_id,
        TaskHistory.can_revert == True
    ).first()
    
    if not history:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if history.field_name and hasattr(task, history.field_name):
        old_value = getattr(task, history.field_name)
        setattr(task, history.field_name, history.old_value)
        task.updated_date = datetime.now()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–∞—Ç
        log_task_change(
            db, task_id,
            "–û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            f"–û—Ç–∫–∞—Ç –ø–æ–ª—è '{history.field_name}': '{old_value}' ‚Üí '{history.old_value}'",
            field_name=history.field_name,
            old_value=old_value,
            new_value=history.old_value,
            user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        db.commit()
        db.refresh(task)
        
        return {
            "message": "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            "reverted_field": history.field_name,
            "reverted_to": history.old_value
        }
    
    raise HTTPException(
        status_code=status.HTTP_400_BAD_REQUEST,
        detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
    )

# –ü–†–ò–ï–ú–ö–ê
@app.get("/api/receptions", response_model=List[ReceptionSchema])
async def get_receptions(
    search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫"),
    status: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É"),
    db: Session = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–µ–º–æ–∫"""
    query = db.query(Reception).order_by(Reception.date.desc())
    
    # –ü–æ–∏—Å–∫
    if search:
        query = query.filter(
            (Reception.name.contains(search)) |
            (Reception.order_number.contains(search)) |
            (Reception.designation.contains(search)) |
            (Reception.route_card_number.contains(search))
        )
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if status:
        query = query.filter(Reception.status == status)
    
    return query.all()

@app.post("/api/receptions", response_model=ReceptionSchema)
async def create_reception(reception: ReceptionCreate, db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ"""
    db_reception = Reception(**reception.dict())
    db.add(db_reception)
    db.commit()
    db.refresh(db_reception)
    return db_reception

# –ò–°–¢–û–†–ò–Ø
@app.get("/api/tasks/{task_id}/history", response_model=List[TaskHistorySchema])
async def get_task_history(task_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    task = db.query(Task).filter(Task.id == task_id).first()
    if not task:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        )
    
    history = db.query(TaskHistory).filter(
        TaskHistory.task_id == task_id
    ).order_by(TaskHistory.timestamp.desc()).all()
    
    return history

# –ê–†–•–ò–í–ê–¶–ò–Ø
@app.post("/api/tasks/archive", response_model=ArchiveResponse)
async def archive_tasks():
    """–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –≥–æ—Ç–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è"""
    count = archive_old_tasks()
    return ArchiveResponse(
        archived_count=count,
        message=f"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {count}"
    )

# –ò–ú–ü–û–†–¢ EXCEL
@app.post("/api/tasks/import")
async def import_tasks_excel(file: UploadFile = File(...), db: Session = Depends(get_db)):
    """–ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞–Ω–∏–π –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xlsx, .xls)"
        )
    
    try:
        import pandas as pd
        from io import BytesIO
        
        # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        contents = await file.read()
        df = pd.read_excel(BytesIO(contents))
        
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['–Ω–æ–º–µ—Ä', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        df_columns_lower = [col.lower() for col in df.columns]
        missing_columns = [col for col in required_columns if col not in df_columns_lower]
        
        if missing_columns:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_columns)}"
            )
        
        created_count = 0
        errors = []
        
        for index, row in df.iterrows():
            try:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
                task_data = {
                    "number": str(row.get('–Ω–æ–º–µ—Ä', f"AUTO-{index}")),
                    "name": str(row.get('–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '')),
                    "description": str(row.get('–æ–ø–∏—Å–∞–Ω–∏–µ', '')),
                    "status": str(row.get('—Å—Ç–∞—Ç—É—Å', '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'))
                }
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞
                existing = db.query(Task).filter(Task.number == task_data["number"]).first()
                if existing:
                    errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: –∑–∞–¥–∞–Ω–∏–µ —Å –Ω–æ–º–µ—Ä–æ–º '{task_data['number']}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                db_task = Task(**task_data)
                db.add(db_task)
                db.commit()
                db.refresh(db_task)
                
                log_task_change(
                    db, db_task.id,
                    "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ",
                    f"–ó–∞–¥–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Excel —Ñ–∞–π–ª–∞ '{file.filename}'"
                )
                
                created_count += 1
                
            except Exception as e:
                errors.append(f"–°—Ç—Ä–æ–∫–∞ {index + 2}: {str(e)}")
                continue
        
        return {
            "message": f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω",
            "created": created_count,
            "errors": errors
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"
        )

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 