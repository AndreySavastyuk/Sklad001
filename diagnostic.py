"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import logging
import flet as ft
from datetime import datetime

def check_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    if sys.version_info < (3, 8):
        print("‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Flet
    try:
        print(f"üé® Flet –≤–µ—Ä—Å–∏—è: {ft.__version__}")
        print("‚úÖ Flet —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Flet
        test_components = [
            ('ft.Icons', hasattr(ft, 'Icons')),
            ('ft.Colors', hasattr(ft, 'Colors')),
            ('ft.Page', hasattr(ft, 'Page')),
            ('ft.app', hasattr(ft, 'app')),
        ]
        
        for component, available in test_components:
            if available:
                print(f"‚úÖ {component} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                print(f"‚ùå {component} –ù–ï –î–û–°–¢–£–ü–ï–ù!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Flet: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SQLAlchemy
    try:
        import sqlalchemy
        print(f"üóÑÔ∏è  SQLAlchemy –≤–µ—Ä—Å–∏—è: {sqlalchemy.__version__}")
        print("‚úÖ SQLAlchemy —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError as e:
        print(f"‚ùå SQLAlchemy –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        import pandas
        print(f"üêº Pandas –≤–µ—Ä—Å–∏—è: {pandas.__version__}")
        print("‚úÖ Pandas —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError as e:
        print(f"‚ùå Pandas –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    
    try:
        import openpyxl
        print(f"üìä OpenPyXL –≤–µ—Ä—Å–∏—è: {openpyxl.__version__}")
        print("‚úÖ OpenPyXL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError as e:
        print(f"‚ùå OpenPyXL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
    required_files = ['main.py', 'models.py', 'requirements.txt']
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ –§–∞–π–ª {file} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå –§–∞–π–ª {file} –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists('sklad.db'):
        size = os.path.getsize('sklad.db')
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞ (—Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç)")
    else:
        print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)")
    
    print("\n" + "=" * 40)
    print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")

def test_flet_minimal():
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Flet"""
    print("\nüß™ –¢–ï–°–¢ FLET...")
    
    def test_app(page: ft.Page):
        page.title = "–¢–µ—Å—Ç Flet"
        page.add(ft.Text("–¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! Flet —Ä–∞–±–æ—Ç–∞–µ—Ç."))
        print("‚úÖ Flet UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞ Flet...")
        ft.app(target=test_app)
        print("‚úÖ –¢–µ—Å—Ç Flet –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flet: {e}")
        return False
    
    return True

def create_test_log():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥–∞"""
    try:
        logging.basicConfig(
            level=logging.DEBUG,
            format='%(asctime)s - %(levelname)s - %(message)s',
            filename='diagnostic.log',
            filemode='w',
            encoding='utf-8'
        )
        
        logger = logging.getLogger('diagnostic')
        logger.info("–¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.debug("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        logger.warning("–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        logger.error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ —Å–æ–∑–¥–∞–Ω: diagnostic.log")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞: {e}")
        return False

if __name__ == "__main__":
    print(f"üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    check_system()
    create_test_log()
    
    print("\nüéØ –•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Flet? (y/n)")
    if input().lower() in ['y', 'yes', '–¥–∞', '–¥']:
        test_flet_minimal()
    
    print("\nüìã –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã diagnostic.log –∏ sklad_app.log –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.") 