import flet as ft
import pandas as pd
from datetime import datetime
from models import *
import os
import logging
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('sklad_app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SkladApp:
    def __init__(self, page: ft.Page):
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            self.page = page
            self.page.title = "–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º"
            self.page.theme_mode = ft.ThemeMode.LIGHT
            self.page.window_width = 1200
            self.page.window_height = 800
            
            logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            init_db()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            logger.info("üé® –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.create_main_layout()
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            logger.error(f"üìç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
        
    def create_main_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tabs = ft.Tabs(
            selected_index=0,
            animation_duration=300,
            tabs=[
                ft.Tab(
                    text="–ó–∞–¥–∞–Ω–∏—è",
                    icon=ft.Icons.ASSIGNMENT,
                    content=self.create_tasks_tab()
                ),
                ft.Tab(
                    text="–ü—Ä–∏–µ–º–∫–∞", 
                    icon=ft.Icons.INVENTORY,
                    content=self.create_reception_tab()
                ),
                ft.Tab(
                    text="–ê—Ä—Ö–∏–≤",
                    icon=ft.Icons.ARCHIVE,
                    content=self.create_archive_tab()
                )
            ]
        )
        
        self.page.add(self.tabs)
        
    def create_tasks_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–¥–∞–Ω–∏–π"""
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_task_btn = ft.ElevatedButton(
            text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ",
            icon=ft.Icons.ADD,
            on_click=self.open_create_task_dialog
        )
        
        self.import_excel_btn = ft.ElevatedButton(
            text="–ò–º–ø–æ—Ä—Ç Excel",
            icon=ft.Icons.UPLOAD_FILE,
            on_click=self.import_excel_dialog
        )
        
        # –ü–æ–∏—Å–∫
        self.task_search = ft.TextField(
            label="–ü–æ–∏—Å–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—è–º",
            prefix_icon=ft.Icons.SEARCH,
            on_change=self.filter_tasks
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π
        self.tasks_table = ft.DataTable(
            columns=[
                ft.DataColumn(ft.Text("ID")),
                ft.DataColumn(ft.Text("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")),
                ft.DataColumn(ft.Text("–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")),
                ft.DataColumn(ft.Text("–°—Ç–∞—Ç—É—Å")),
                ft.DataColumn(ft.Text("–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")),
            ],
            rows=[]
        )
        
        self.refresh_tasks_table()
        
        return ft.Column([
            ft.Row([
                self.create_task_btn,
                self.import_excel_btn,
                ft.Container(expand=True),
                self.task_search
            ]),
            ft.Container(
                content=self.tasks_table,
                expand=True,
                border=ft.border.all(1, ft.Colors.OUTLINE),
                border_radius=10,
                padding=10
            )
        ])
    
    def create_reception_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø—Ä–∏–µ–º–∫–∏"""
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        self.add_reception_btn = ft.ElevatedButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é",
            icon=ft.Icons.ADD,
            on_click=self.open_create_reception_dialog
        )
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
        self.reception_search = ft.TextField(
            label="–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–µ–º–∫–µ",
            prefix_icon=ft.Icons.SEARCH,
            on_change=self.filter_reception
        )
        
        # –§–∏–ª—å—Ç—Ä—ã
        self.reception_status_filter = ft.Dropdown(
            label="–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=[
                ft.dropdown.Option("–≤—Å–µ"),
                ft.dropdown.Option("–ø—Ä–∏–Ω—è—Ç"),
                ft.dropdown.Option("–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è"),
                ft.dropdown.Option("–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü")
            ],
            value="–≤—Å–µ",
            on_change=self.filter_reception
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–∏–µ–º–∫–∏
        self.reception_table = ft.DataTable(
            columns=[
                ft.DataColumn(ft.Text("–î–∞—Ç–∞")),
                ft.DataColumn(ft.Text("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")),
                ft.DataColumn(ft.Text("–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")),
                ft.DataColumn(ft.Text("‚Ññ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã")),
                ft.DataColumn(ft.Text("–°—Ç–∞—Ç—É—Å")),
            ],
            rows=[]
        )
        
        self.refresh_reception_table()
        
        return ft.Column([
            ft.Row([
                self.add_reception_btn,
                ft.Container(expand=True),
                self.reception_status_filter,
                self.reception_search
            ]),
            ft.Container(
                content=self.reception_table,
                expand=True,
                border=ft.border.all(1, ft.Colors.OUTLINE),
                border_radius=10,
                padding=10
            )
        ])
    
    def create_archive_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞—Ä—Ö–∏–≤–∞"""
        # –ü–æ–∏—Å–∫
        self.archive_search = ft.TextField(
            label="–ü–æ–∏—Å–∫ –≤ –∞—Ä—Ö–∏–≤–µ",
            prefix_icon=ft.Icons.SEARCH,
            on_change=self.filter_archive
        )
        
        # –¢–∞–±–ª–∏—Ü–∞ –∞—Ä—Ö–∏–≤–∞
        self.archive_table = ft.DataTable(
            columns=[
                ft.DataColumn(ft.Text("ID")),
                ft.DataColumn(ft.Text("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")),
                ft.DataColumn(ft.Text("–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")),
                ft.DataColumn(ft.Text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")),
                ft.DataColumn(ft.Text("–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è")),
            ],
            rows=[]
        )
        
        self.refresh_archive_table()
        
        return ft.Column([
            ft.Row([
                ft.Container(expand=True),
                self.archive_search
            ]),
            ft.Container(
                content=self.archive_table,
                expand=True,
                border=ft.border.all(1, ft.Colors.OUTLINE),
                border_radius=10,
                padding=10
            )
        ])
    
    def refresh_tasks_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π...")
            tasks = get_all_tasks()
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
            self.tasks_table.rows.clear()
            
            for i, task in enumerate(tasks):
                logger.debug(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏—è {i+1}/{len(tasks)}: {task.order_number}")
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
                status_color = self.get_status_color(task.status)
                
                row = ft.DataRow(
                    cells=[
                        ft.DataCell(ft.Text(str(task.id))),
                        ft.DataCell(ft.Text(task.order_number)),
                        ft.DataCell(ft.Text(task.designation)),
                        ft.DataCell(ft.Text(task.name)),
                        ft.DataCell(ft.Text(task.quantity)),
                        ft.DataCell(ft.Container(
                            content=ft.Text(task.status, color=ft.Colors.WHITE),
                            bgcolor=status_color,
                            padding=5,
                            border_radius=5
                        )),
                        ft.DataCell(ft.Text(task.created_date.strftime("%d.%m.%Y"))),
                    ],
                    on_select_changed=lambda e, task_id=task.id: self.open_edit_task_dialog(task_id)
                )
                self.tasks_table.rows.append(row)
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            self.page.update()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π: {e}")
            logger.error(f"üìç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
            raise
    
    def refresh_reception_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏–µ–º–∫–∏"""
        receptions = get_all_reception()
        self.reception_table.rows.clear()
        
        for reception in receptions:
            row = ft.DataRow(
                cells=[
                    ft.DataCell(ft.Text(reception.date.strftime("%d.%m.%Y"))),
                    ft.DataCell(ft.Text(reception.order_number)),
                    ft.DataCell(ft.Text(reception.designation)),
                    ft.DataCell(ft.Text(reception.name)),
                    ft.DataCell(ft.Text(reception.quantity)),
                    ft.DataCell(ft.Text(reception.route_card)),
                    ft.DataCell(ft.Text(reception.status)),
                ]
            )
            self.reception_table.rows.append(row)
        
        self.page.update()
    
    def refresh_archive_table(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞—Ä—Ö–∏–≤–∞"""
        archives = get_all_archive()
        self.archive_table.rows.clear()
        
        for archive in archives:
            row = ft.DataRow(
                cells=[
                    ft.DataCell(ft.Text(str(archive.id))),
                    ft.DataCell(ft.Text(archive.order_number)),
                    ft.DataCell(ft.Text(archive.designation)),
                    ft.DataCell(ft.Text(archive.name)),
                    ft.DataCell(ft.Text(archive.quantity)),
                    ft.DataCell(ft.Text(archive.archived_date.strftime("%d.%m.%Y"))),
                ],
                on_select_changed=lambda e, archive_id=archive.id: self.open_archive_detail_dialog(archive_id)
            )
            self.archive_table.rows.append(row)
        
        self.page.update()
    
    def get_status_color(self, status):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            colors = {
                "–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ": ft.Colors.ORANGE,
                "–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ": ft.Colors.BLUE,
                "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ": ft.Colors.PURPLE,
                "–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è": ft.Colors.AMBER,
                "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ": ft.Colors.RED,
                "–≥–æ—Ç–æ–≤–æ": ft.Colors.GREEN
            }
            color = colors.get(status, ft.Colors.GREY)
            logger.debug(f"üé® –¶–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{status}': {color}")
            return color
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ '{status}': {e}")
            return ft.Colors.GREY
    
    def open_create_task_dialog(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        order_field = ft.TextField(label="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        designation_field = ft.TextField(label="–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")
        name_field = ft.TextField(label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        quantity_field = ft.TextField(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        description_field = ft.TextField(label="–û–ø–∏—Å–∞–Ω–∏–µ", multiline=True)
        route_card_field = ft.TextField(label="–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã")
        
        def save_task(e):
            create_task(
                order_field.value,
                designation_field.value,
                name_field.value,
                quantity_field.value,
                description_field.value,
                route_card_field.value
            )
            self.refresh_tasks_table()
            dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"),
            content=ft.Column([
                order_field,
                designation_field,
                name_field,
                quantity_field,
                route_card_field,
                description_field
            ], height=400, scroll=ft.ScrollMode.AUTO),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: setattr(dialog, 'open', False) or self.page.update()),
                ft.ElevatedButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_task)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def open_edit_task_dialog(self, task_id):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
        db = get_db()
        task = db.query(Task).filter(Task.id == task_id).first()
        db.close()
        
        if not task:
            return
        
        order_field = ft.TextField(label="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", value=task.order_number)
        designation_field = ft.TextField(label="–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ", value=task.designation)
        name_field = ft.TextField(label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", value=task.name)
        quantity_field = ft.TextField(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", value=task.quantity)
        description_field = ft.TextField(label="–û–ø–∏—Å–∞–Ω–∏–µ", value=task.description, multiline=True)
        route_card_field = ft.TextField(label="–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã", value=task.route_card)
        
        status_field = ft.Dropdown(
            label="–°—Ç–∞—Ç—É—Å",
            value=task.status,
            options=[
                ft.dropdown.Option("–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"),
                ft.dropdown.Option("–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ"),
                ft.dropdown.Option("–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"),
                ft.dropdown.Option("–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"),
                ft.dropdown.Option("–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"),
                ft.dropdown.Option("–≥–æ—Ç–æ–≤–æ")
            ]
        )
        
        def update_task(e):
            db = get_db()
            try:
                task_to_update = db.query(Task).filter(Task.id == task_id).first()
                if task_to_update:
                    task_to_update.order_number = order_field.value
                    task_to_update.designation = designation_field.value
                    task_to_update.name = name_field.value
                    task_to_update.quantity = quantity_field.value
                    task_to_update.description = description_field.value
                    task_to_update.route_card = route_card_field.value
                    task_to_update.status = status_field.value
                    task_to_update.updated_date = datetime.now()
                    db.commit()
            finally:
                db.close()
            
            self.refresh_tasks_table()
            dialog.open = False
            self.page.update()
        
        def delete_task_action(e):
            delete_task(task_id)
            self.refresh_tasks_table()
            dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ #{task_id}"),
            content=ft.Column([
                order_field,
                designation_field,
                name_field,
                quantity_field,
                route_card_field,
                status_field,
                description_field
            ], height=500, scroll=ft.ScrollMode.AUTO),
            actions=[
                ft.TextButton("–£–¥–∞–ª–∏—Ç—å", on_click=delete_task_action, style=ft.ButtonStyle(color=ft.Colors.RED)),
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: setattr(dialog, 'open', False) or self.page.update()),
                ft.ElevatedButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=update_task)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def open_create_reception_dialog(self, e):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–µ–º–∫–∏"""
        order_field = ft.TextField(label="–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞")
        designation_field = ft.TextField(label="–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ")
        name_field = ft.TextField(label="–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")
        quantity_field = ft.TextField(label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        route_card_field = ft.TextField(label="–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã")
        
        status_field = ft.Dropdown(
            label="–°—Ç–∞—Ç—É—Å",
            value="–ø—Ä–∏–Ω—è—Ç",
            options=[
                ft.dropdown.Option("–ø—Ä–∏–Ω—è—Ç"),
                ft.dropdown.Option("–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è"),
                ft.dropdown.Option("–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü")
            ]
        )
        
        def save_reception(e):
            create_reception_item(
                order_field.value,
                designation_field.value,
                name_field.value,
                quantity_field.value,
                route_card_field.value,
                status_field.value
            )
            self.refresh_reception_table()
            dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–∏–µ–º–∫—É"),
            content=ft.Column([
                order_field,
                designation_field,
                name_field,
                quantity_field,
                route_card_field,
                status_field
            ], height=400, scroll=ft.ScrollMode.AUTO),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: setattr(dialog, 'open', False) or self.page.update()),
                ft.ElevatedButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_reception)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def open_archive_detail_dialog(self, archive_id):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–µ—Ç–∞–ª–µ–π –∞—Ä—Ö–∏–≤–∞"""
        db = get_db()
        archive_item = db.query(Archive).filter(Archive.id == archive_id).first()
        db.close()
        
        if not archive_item:
            return
        
        def create_from_archive(e):
            new_task = create_task_from_archive(archive_id)
            if new_task:
                self.refresh_tasks_table()
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞–Ω–∏–π
                self.tabs.selected_index = 0
                self.page.update()
            dialog.open = False
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text(f"–ê—Ä—Ö–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{archive_item.original_task_id}"),
            content=ft.Column([
                ft.Text(f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {archive_item.order_number}"),
                ft.Text(f"–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ: {archive_item.designation}"),
                ft.Text(f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {archive_item.name}"),
                ft.Text(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {archive_item.quantity}"),
                ft.Text(f"–ú–∞—Ä—à—Ä—É—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞: {archive_item.route_card}"),
                ft.Text(f"–°—Ç–∞—Ç—É—Å: {archive_item.status}"),
                ft.Text(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {archive_item.created_date.strftime('%d.%m.%Y')}"),
                ft.Text(f"–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {archive_item.completed_date.strftime('%d.%m.%Y')}"),
                ft.Text(f"–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {archive_item.archived_date.strftime('%d.%m.%Y')}"),
                ft.Text(f"–û–ø–∏—Å–∞–Ω–∏–µ: {archive_item.description}"),
            ], height=400, scroll=ft.ScrollMode.AUTO),
            actions=[
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å", on_click=lambda e: setattr(dialog, 'open', False) or self.page.update()),
                ft.ElevatedButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ", on_click=create_from_archive)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def import_excel_dialog(self, e):
        """–î–∏–∞–ª–æ–≥ –∏–º–ø–æ—Ä—Ç–∞ Excel"""
        def import_excel(e):
            dialog.open = False
            self.page.update()
            
            info_dialog = ft.AlertDialog(
                title=ft.Text("–ò–º–ø–æ—Ä—Ç Excel"),
                content=ft.Text("–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞. –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é."),
                actions=[ft.TextButton("OK", on_click=lambda e: setattr(info_dialog, 'open', False) or self.page.update())]
            )
            self.page.dialog = info_dialog
            info_dialog.open = True
            self.page.update()
        
        dialog = ft.AlertDialog(
            title=ft.Text("–ò–º–ø–æ—Ä—Ç –∏–∑ Excel"),
            content=ft.Text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞–Ω–∏–π"),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: setattr(dialog, 'open', False) or self.page.update()),
                ft.ElevatedButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", on_click=import_excel)
            ]
        )
        
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()
    
    def filter_tasks(self, e):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏–π"""
        self.refresh_tasks_table()
    
    def filter_reception(self, e):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏–µ–º–∫–∏"""
        self.refresh_reception_table()
    
    def filter_archive(self, e):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞"""
        self.refresh_archive_table()

def main(page: ft.Page):
    try:
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        app = SkladApp(page)
        logger.info("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        logger.error(f"üìç –ü–æ–ª–Ω–∞—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        page.add(ft.Text(
            f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n{str(e)}\n\n–î–µ—Ç–∞–ª–∏ –≤ —Ñ–∞–π–ª–µ sklad_app.log",
            color=ft.Colors.RED
        ))

if __name__ == "__main__":
    try:
        logger.info("=" * 50)
        logger.info("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–õ–ê–î–û–ú")
        logger.info("=" * 50)
        ft.app(target=main)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flet: {e}")
        logger.error(f"üìç –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª sklad_app.log")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
