// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 0;
let tasks = [];
let receptions = [];
let archivedTasks = [];
let sortColumn = 'created_date';
let sortOrder = 'desc';
let editingItem = null;
let selectedTasks = new Set();
let currentFilters = {};
let savedFilters = [];
let tasksStats = {};
let autoRefreshInterval = null;

// API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = window.location.origin;
const API_URL = `${API_BASE_URL}/api`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadData();
    updateToolbar();
    loadSavedFilters();
    loadTasksStats();
    startAutoRefresh();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(archiveOldTasks, 24 * 60 * 60 * 1000);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
    const logoIcon = document.querySelector('.logo-icon');
    if (logoIcon) {
        setInterval(() => {
            logoIcon.style.transform = 'rotate(-5deg) scale(1.1)';
            setTimeout(() => {
                logoIcon.style.transform = 'rotate(-5deg) scale(1)';
            }, 200);
        }, 5000);
    }
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabIndex) {
    currentTab = tabIndex;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach((tab, index) => {
        if (index === tabIndex) {
            tab.classList.add('active');
            // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
            tab.style.transform = 'scale(1.05)';
            setTimeout(() => {
                tab.style.transform = 'scale(1)';
            }, 200);
        } else {
            tab.classList.remove('active');
        }
    });

    // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    document.getElementById('searchInput').value = '';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    updateToolbar();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    loadData();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function updateToolbar() {
    const toolbarButtons = document.getElementById('toolbarButtons');
    toolbarButtons.innerHTML = '';

    if (currentTab === 0) {
        toolbarButtons.innerHTML = `
            <button class="btn btn-primary" onclick="openTaskModal()">
                <span>‚ûï</span> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
            </button>
            <button class="btn btn-secondary" onclick="importExcel()">
                <span>üì•</span> –ò–º–ø–æ—Ä—Ç Excel
            </button>
        `;
    } else if (currentTab === 1) {
        toolbarButtons.innerHTML = `
            <button class="btn btn-primary" onclick="openReceptionModal()">
                <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º–∫—É
            </button>
        `;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    const buttons = toolbarButtons.querySelectorAll('.btn');
    buttons.forEach((btn, index) => {
        btn.style.opacity = '0';
        btn.style.transform = 'translateY(20px)';
        setTimeout(() => {
            btn.style.transition = 'all 0.3s ease';
            btn.style.opacity = '1';
            btn.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    showLoading();
    
    try {
        let url = '';
        if (currentTab === 0) {
            url = `${API_URL}/tasks?archived=false&sort_by=${sortColumn}&sort_order=${sortOrder}`;
        } else if (currentTab === 1) {
            url = `${API_URL}/receptions`;
        } else if (currentTab === 2) {
            url = `${API_URL}/tasks?archived=true&sort_by=${sortColumn}&sort_order=${sortOrder}`;
        }

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();

        if (currentTab === 0) {
            tasks = data;
            renderTasks();
        } else if (currentTab === 1) {
            receptions = data;
            renderReceptions();
        } else if (currentTab === 2) {
            archivedTasks = data;
            renderArchivedTasks();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
function renderTasks() {
    const content = document.getElementById('content');
    
    if (tasks.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìã</div>
                <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"</p>
                <button class="btn btn-primary" onclick="openTaskModal()">
                    <span>‚ûï</span> –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </button>
            </div>
    `;
}

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openModal() {
    const modal = document.getElementById('modal');
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    const modalContent = modal.querySelector('.modal-content');
    modalContent.style.animation = 'none';
    setTimeout(() => {
        modalContent.style.animation = '';
    }, 10);
}

function closeModal() {
    const modal = document.getElementById('modal');
    modal.classList.remove('show');
    document.body.style.overflow = '';
    editingItem = null;
}

function handleModalClick(event) {
    if (event.target === event.currentTarget) {
        closeModal();
    }
}

// –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
function showConfirmDialog(title, message) {
    return new Promise((resolve) => {
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        const modalFooter = document.getElementById('modalFooter');
        
        modalTitle.textContent = title;
        modalBody.innerHTML = `<p style="font-size: 1.1rem; line-height: 1.6;">${message}</p>`;
        
        modalFooter.innerHTML = `
            <button class="btn btn-secondary" onclick="closeModal(); window.confirmResolve(false)">–û—Ç–º–µ–Ω–∞</button>
            <button class="btn btn-danger" onclick="closeModal(); window.confirmResolve(true)">
                <span>üóëÔ∏è</span> –£–¥–∞–ª–∏—Ç—å
            </button>
        `;
        
        window.confirmResolve = resolve;
        openModal();
    });
}

// –¢–æ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(type, title, message) {
    const toast = document.getElementById('toast');
    const toastIcon = document.getElementById('toastIcon');
    const toastTitle = document.getElementById('toastTitle');
    const toastMessage = document.getElementById('toastMessage');

    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤
    toast.className = 'toast';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞
    toast.classList.add(`toast-${type}`);
    
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    toastIcon.textContent = icons[type] || icons.info;
    toastTitle.textContent = title;
    toastMessage.textContent = message;
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    toast.classList.add('show');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// –ò–º–ø–æ—Ä—Ç Excel
function importExcel() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xlsx,.xls';
    input.onchange = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);

        try {
            showToast('info', '–ò–º–ø–æ—Ä—Ç', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
            
            const response = await fetch(`${API_URL}/tasks/import`, {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.detail || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
            }
            
            showToast('success', '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 
                `–°–æ–∑–¥–∞–Ω–æ: ${result.created}, –û—à–∏–±–æ–∫: ${result.errors.length}`);
            
            if (result.errors.length > 0) {
                console.warn('–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', result.errors);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
                setTimeout(() => {
                    showErrorDetails(result.errors);
                }, 500);
            }
            
            loadData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            showToast('error', '–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª');
        }
    };
    input.click();
}

// –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
function showErrorDetails(errors) {
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    const modalFooter = document.getElementById('modalFooter');
    
    modalTitle.textContent = '–û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ';
    
    modalBody.innerHTML = `
        <div style="max-height: 400px; overflow-y: auto;">
            <p class="mb-2">–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –æ—à–∏–±–∫–∏:</p>
            <ul style="list-style: none; padding: 0;">
                ${errors.map(error => `
                    <li style="padding: 0.75rem; background: rgba(239, 68, 68, 0.05); border-left: 3px solid var(--danger); margin-bottom: 0.5rem; border-radius: var(--radius);">
                        ${escapeHtml(error)}
                    </li>
                `).join('')}
            </ul>
        </div>
    `;
    
    modalFooter.innerHTML = '<button class="btn btn-primary" onclick="closeModal()">–ü–æ–Ω—è—Ç–Ω–æ</button>';
    
    openModal();
}

// –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
async function archiveOldTasks() {
    try {
        const response = await fetch(`${API_URL}/tasks/archive`, {
            method: 'POST'
        });
        const result = await response.json();
        
        if (result.archived_count > 0) {
            console.log(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${result.archived_count}`);
            if (currentTab === 0 || currentTab === 2) {
                loadData();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', error);
    }
}

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    // Escape - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (event.key === 'Escape') {
        const modal = document.getElementById('modal');
        if (modal.classList.contains('show')) {
            closeModal();
        }
    }
    
    // Ctrl+N - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if (event.ctrlKey && event.key === 'n') {
        event.preventDefault();
        if (currentTab === 0) {
            openTaskModal();
        } else if (currentTab === 1) {
            openReceptionModal();
        }
    }
    
    // Ctrl+F - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
    if (event.ctrlKey && event.key === 'f') {
        event.preventDefault();
        const searchInput = document.getElementById('searchInput');
        searchInput.focus();
        searchInput.select();
    }
    
    // Alt+1,2,3 - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    if (event.altKey) {
        if (event.key === '1') {
            event.preventDefault();
            switchTab(0);
        } else if (event.key === '2') {
            event.preventDefault();
            switchTab(1);
        } else if (event.key === '3') {
            event.preventDefault();
            switchTab(2);
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –º–∞–ª–µ–Ω—å–∫–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
const style = document.createElement('style');
style.textContent = `
    .spinner-small {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 0.6s linear infinite;
    }
    
    .btn-danger {
        background: linear-gradient(135deg, var(--danger) 0%, #dc2626 100%);
        color: white;
    }
    
    .btn-danger:hover {
        background: linear-gradient(135deg, #dc2626 0%, #b91c1c 100%);
    }
`;
document.head.appendChild(style);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    const actionButtons = document.querySelectorAll('.btn-icon');
    actionButtons.forEach(button => {
        button.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.1)';
        });
        button.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
        });
    });
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.switchTab = switchTab;
window.openTaskModal = openTaskModal;
window.openReceptionModal = openReceptionModal;
window.editTask = editTask;
window.deleteTask = deleteTask;
window.viewHistory = viewHistory;
window.createFromArchived = createFromArchived;
window.handleSearchKeyPress = handleSearchKeyPress;
window.performSearch = performSearch;
window.sortTable = sortTable;
window.saveData = saveData;
window.closeModal = closeModal;
window.handleModalClick = handleModalClick;
window.importExcel = importExcel;
window.loadData = loadData;

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function startAutoRefresh() {
    autoRefreshInterval = setInterval(() => {
        loadData();
        loadTasksStats();
    }, 30000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
async function loadTasksStats() {
    try {
        const response = await fetch(`${API_URL}/tasks-stats`);
        if (response.ok) {
            tasksStats = await response.json();
            updateTabCounters();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –≤–∫–ª–∞–¥–∫–∞—Ö
function updateTabCounters() {
    const tasksCounter = document.getElementById('tasksCounter');
    const receptionsCounter = document.getElementById('receptionsCounter');
    const archiveCounter = document.getElementById('archiveCounter');
    
    if (tasksCounter && tasksStats.total_tasks !== undefined) {
        tasksCounter.textContent = tasksStats.total_tasks;
        tasksCounter.style.display = tasksStats.total_tasks > 0 ? 'inline' : 'none';
        
        if (tasksStats.overdue_count > 0) {
            tasksCounter.style.background = 'var(--danger)';
            tasksCounter.title = `${tasksStats.overdue_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π`;
        } else {
            tasksCounter.style.background = '';
            tasksCounter.title = '';
        }
    }
    
    if (receptionsCounter) {
        receptionsCounter.textContent = receptions.length;
        receptionsCounter.style.display = receptions.length > 0 ? 'inline' : 'none';
    }
    
    if (archiveCounter) {
        archiveCounter.textContent = archivedTasks.length;
        archiveCounter.style.display = archivedTasks.length > 0 ? 'inline' : 'none';
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getPriorityBadge(priority) {
    return `<span class="priority priority-${priority}">${escapeHtml(priority)}</span>`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏–π
function toggleTaskSelection(taskId) {
    if (selectedTasks.has(taskId)) {
        selectedTasks.delete(taskId);
    } else {
        selectedTasks.add(taskId);
    }
    updateBulkActions();
    updateCheckboxStates();
}

function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('selectAll');
    const taskCheckboxes = document.querySelectorAll('.task-checkbox');
    
    if (selectAllCheckbox && selectAllCheckbox.checked) {
        taskCheckboxes.forEach(checkbox => {
            const taskId = parseInt(checkbox.value);
            selectedTasks.add(taskId);
            checkbox.checked = true;
        });
    } else {
        selectedTasks.clear();
        taskCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
    }
    
    updateBulkActions();
}

function selectAllTasks() {
    tasks.forEach(task => selectedTasks.add(task.id));
    updateBulkActions();
    updateCheckboxStates();
}

function clearSelection() {
    selectedTasks.clear();
    updateBulkActions();
    updateCheckboxStates();
}

function updateCheckboxStates() {
    const selectAllCheckbox = document.getElementById('selectAll');
    const taskCheckboxes = document.querySelectorAll('.task-checkbox');
    
    if (selectAllCheckbox) {
        const allSelected = taskCheckboxes.length > 0 && 
                           Array.from(taskCheckboxes).every(cb => selectedTasks.has(parseInt(cb.value)));
        selectAllCheckbox.checked = allSelected;
    }
    
    taskCheckboxes.forEach(checkbox => {
        checkbox.checked = selectedTasks.has(parseInt(checkbox.value));
    });
}

function updateBulkActions() {
    const bulkActions = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');
    
    if (bulkActions && selectedCount) {
        if (selectedTasks.size > 0) {
            bulkActions.classList.add('show');
            selectedCount.textContent = selectedTasks.size;
        } else {
            bulkActions.classList.remove('show');
        }
    }
}

// –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
async function applyBulkUpdate() {
    if (selectedTasks.size === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    const statusSelect = document.getElementById('bulkStatusSelect');
    const prioritySelect = document.getElementById('bulkPrioritySelect');
    
    const updateData = {
        task_ids: Array.from(selectedTasks)
    };
    
    if (statusSelect && statusSelect.value) updateData.status = statusSelect.value;
    if (prioritySelect && prioritySelect.value) updateData.priority = prioritySelect.value;
    
    if (!updateData.status && !updateData.priority) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å');
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/tasks/bulk-update`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
        
        const result = await response.json();
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', result.message);
        
        clearSelection();
        if (statusSelect) statusSelect.value = '';
        if (prioritySelect) prioritySelect.value = '';
        loadData();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    }
}

async function bulkDeleteTasks() {
    if (selectedTasks.size === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    const confirmed = await showConfirmDialog(
        '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ',
        `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedTasks.size} –∑–∞–¥–∞–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    );
    
    if (!confirmed) return;
    
    try {
        const response = await fetch(`${API_URL}/tasks/bulk-delete`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Array.from(selectedTasks))
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        
        const result = await response.json();
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', result.message);
        
        clearSelection();
        loadData();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
function toggleFilters() {
    const filtersPanel = document.getElementById('filtersPanel');
    const filtersToggle = document.getElementById('filtersToggle');
    
    if (filtersPanel && filtersToggle) {
        if (filtersPanel.classList.contains('show')) {
            filtersPanel.classList.remove('show');
            filtersToggle.innerHTML = '<span>üîç</span> –§–∏–ª—å—Ç—Ä—ã';
        } else {
            filtersPanel.classList.add('show');
            filtersToggle.innerHTML = '<span>üîç</span> –°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
            setupFiltersPanel();
        }
    }
}

function setupFiltersPanel() {
    const filtersGrid = document.getElementById('filtersGrid');
    
    if (filtersGrid && currentTab === 0) {
        filtersGrid.innerHTML = `
            <div class="filter-group">
                <label class="filter-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="filter-select" id="filterStatus">
                    <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                    <option value="–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</option>
                    <option value="–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ">–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</option>
                    <option value="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</option>
                    <option value="–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–≥–æ—Ç–æ–≤–æ">–ì–æ—Ç–æ–≤–æ</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                <select class="filter-select" id="filterPriority">
                    <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                    <option value="–Ω–∏–∑–∫–∏–π">–ù–∏–∑–∫–∏–π</option>
                    <option value="—Å—Ä–µ–¥–Ω–∏–π">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="–≤—ã—Å–æ–∫–∏–π">–í—ã—Å–æ–∫–∏–π</option>
                    <option value="—Å—Ä–æ—á–Ω—ã–π">–°—Ä–æ—á–Ω—ã–π</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</label>
                <input type="text" class="filter-input" id="filterResponsible" placeholder="–ò–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ">
            </div>
            <div class="filter-group">
                <label class="filter-label">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</label>
                <select class="filter-select" id="filterOverdue">
                    <option value="">–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</option>
                    <option value="true">–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</option>
                    <option value="false">–ù–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</option>
                </select>
            </div>
        `;
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        Object.keys(currentFilters).forEach(key => {
            const element = document.getElementById(`filter${key.charAt(0).toUpperCase() + key.slice(1)}`);
            if (element) {
                element.value = currentFilters[key] || '';
            }
        });
    }
}

function applyFilters() {
    currentFilters = {};
    
    const filterElements = document.querySelectorAll('#filtersGrid .filter-select, #filtersGrid .filter-input');
    filterElements.forEach(element => {
        const filterName = element.id.replace('filter', '').toLowerCase();
        if (element.value) {
            currentFilters[filterName] = element.value;
        }
    });
    
    loadData();
    showToast('info', '–§–∏–ª—å—Ç—Ä—ã', '–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
}

function clearFilters() {
    currentFilters = {};
    const filterElements = document.querySelectorAll('#filtersGrid .filter-select, #filtersGrid .filter-input');
    filterElements.forEach(element => {
        element.value = '';
    });
    loadData();
    showToast('info', '–§–∏–ª—å—Ç—Ä—ã', '–§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function saveCurrentFilter() {
    if (Object.keys(currentFilters).length === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:');
    if (!name) return;
    
    try {
        const response = await fetch(`${API_URL}/filters`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name: name,
                filter_data: JSON.stringify(currentFilters)
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞');
        }
        
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        loadSavedFilters();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä');
    }
}

async function loadSavedFilters() {
    try {
        const response = await fetch(`${API_URL}/filters`);
        if (response.ok) {
            savedFilters = await response.json();
            updateSavedFiltersSelect();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
    }
}

function updateSavedFiltersSelect() {
    const select = document.getElementById('savedFilters');
    if (!select) return;
    
    select.innerHTML = '<option value="">–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</option>';
    savedFilters.forEach(filter => {
        const option = document.createElement('option');
        option.value = filter.id;
        option.textContent = filter.name;
        select.appendChild(option);
    });
}

function loadSavedFilter() {
    const select = document.getElementById('savedFilters');
    if (!select) return;
    
    const filterId = select.value;
    if (!filterId) return;
    
    const filter = savedFilters.find(f => f.id == filterId);
    if (filter) {
        currentFilters = JSON.parse(filter.filter_data);
        setupFiltersPanel();
        loadData();
        showToast('info', '–§–∏–ª—å—Ç—Ä', `–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä "${filter.name}"`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
window.toggleFilters = toggleFilters;
window.applyFilters = applyFilters;
window.clearFilters = clearFilters;
window.saveCurrentFilter = saveCurrentFilter;
window.loadSavedFilter = loadSavedFilter;
window.toggleTaskSelection = toggleTaskSelection;
window.toggleSelectAll = toggleSelectAll;
window.selectAllTasks = selectAllTasks;
window.clearSelection = clearSelection;
window.applyBulkUpdate = applyBulkUpdate;
window.bulkDeleteTasks = bulkDeleteTasks;
        `;
        return;
    }

    content.innerHTML = `
        <table>
            <thead>
                <tr>
                    <th style="width: 40px;">
                        <input type="checkbox" class="checkbox" id="selectAll" onchange="toggleSelectAll()">
                    </th>
                    <th onclick="sortTable('number')">
                        –ù–æ–º–µ—Ä <span class="sort-indicator">${getSortIndicator('number')}</span>
                    </th>
                    <th onclick="sortTable('name')">
                        –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="sort-indicator">${getSortIndicator('name')}</span>
                    </th>
                    <th onclick="sortTable('priority')">
                        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç <span class="sort-indicator">${getSortIndicator('priority')}</span>
                    </th>
                    <th onclick="sortTable('responsible')">
                        –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π <span class="sort-indicator">${getSortIndicator('responsible')}</span>
                    </th>
                    <th onclick="sortTable('due_date')">
                        –°—Ä–æ–∫ <span class="sort-indicator">${getSortIndicator('due_date')}</span>
                    </th>
                    <th onclick="sortTable('status')">
                        –°—Ç–∞—Ç—É—Å <span class="sort-indicator">${getSortIndicator('status')}</span>
                    </th>
                    <th onclick="sortTable('created_date')">
                        –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è <span class="sort-indicator">${getSortIndicator('created_date')}</span>
                    </th>
                    <th style="width: 120px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${tasks.map((task, index) => {
                    const isOverdue = task.due_date && new Date(task.due_date) < new Date() && task.status !== '–≥–æ—Ç–æ–≤–æ';
                    const rowClass = isOverdue ? 'overdue-row' : '';
                    
                    return `
                        <tr class="${rowClass}" ondblclick="editTask(${task.id})" 
                            style="animation: fadeInUp 0.3s ease ${index * 0.05}s both">
                            <td onclick="event.stopPropagation()">
                                <input type="checkbox" class="checkbox task-checkbox" 
                                       value="${task.id}" onchange="toggleTaskSelection(${task.id})">
                            </td>
                            <td><strong>${escapeHtml(task.number)}</strong></td>
                            <td>
                                ${escapeHtml(task.name)}
                                ${task.attachments ? '<span style="color: var(--info);">üìé</span>' : ''}
                            </td>
                            <td>${getPriorityBadge(task.priority || '—Å—Ä–µ–¥–Ω–∏–π')}</td>
                            <td>${escapeHtml(task.responsible || '‚Äî')}</td>
                            <td>
                                ${task.due_date ? formatDate(task.due_date) : '‚Äî'}
                                ${isOverdue ? '<span class="overdue-indicator">‚ö†Ô∏è</span>' : ''}
                            </td>
                            <td>${getStatusBadge(task.status)}</td>
                            <td>${formatDate(task.created_date)}</td>
                            <td onclick="event.stopPropagation()">
                                <div class="action-buttons">
                                    <button class="btn-icon" onclick="editTask(${task.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                        ‚úèÔ∏è
                                    </button>
                                    <button class="btn-icon" onclick="deleteTask(${task.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                        üóëÔ∏è
                                    </button>
                                    <button class="btn-icon" onclick="viewHistory(${task.id})" title="–ò—Å—Ç–æ—Ä–∏—è">
                                        üìú
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                }).join('')}
            </tbody>
        </table>
    `;
    
    updateCheckboxStates();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    const style = document.createElement('style');
    style.textContent = `
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    `;
    document.head.appendChild(style);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–µ–º–æ–∫
function renderReceptions() {
    const content = document.getElementById('content');
    
    if (receptions.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üì¶</div>
                <h3>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∫–µ</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ —Ç–æ–≤–∞—Ä–æ–≤</p>
                <button class="btn btn-primary" onclick="openReceptionModal()">
                    <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º–∫—É
                </button>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <table>
            <thead>
                <tr>
                    <th onclick="sortTable('date')">
                        –î–∞—Ç–∞ <span class="sort-indicator">${getSortIndicator('date')}</span>
                    </th>
                    <th>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</th>
                    <th>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ</th>
                    <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    <th>‚Ññ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                </tr>
            </thead>
            <tbody>
                ${receptions.map((reception, index) => `
                    <tr style="animation: fadeInUp 0.3s ease ${index * 0.05}s both">
                        <td>${formatDate(reception.date)}</td>
                        <td><strong>${escapeHtml(reception.order_number)}</strong></td>
                        <td>${escapeHtml(reception.designation)}</td>
                        <td>${escapeHtml(reception.name)}</td>
                        <td>${escapeHtml(reception.quantity)}</td>
                        <td>${escapeHtml(reception.route_card_number)}</td>
                        <td>${getStatusBadge(reception.status)}</td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
function renderArchivedTasks() {
    const content = document.getElementById('content');
    
    if (archivedTasks.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üóÑÔ∏è</div>
                <h3>–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç</h3>
                <p>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ø–∞–¥—É—Ç —Å—é–¥–∞ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π</p>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <table>
            <thead>
                <tr>
                    <th>–ù–æ–º–µ—Ä</th>
                    <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                    <th>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</th>
                    <th style="width: 120px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${archivedTasks.map((task, index) => `
                    <tr ondblclick="viewHistory(${task.id})"
                        style="animation: fadeInUp 0.3s ease ${index * 0.05}s both">
                        <td><strong>${escapeHtml(task.number)}</strong></td>
                        <td>${escapeHtml(task.name)}</td>
                        <td>${getStatusBadge(task.status)}</td>
                        <td>${formatDate(task.created_date)}</td>
                        <td>${task.completed_date ? formatDate(task.completed_date) : '‚Äî'}</td>
                        <td onclick="event.stopPropagation()">
                            <div class="action-buttons">
                                <button class="btn-icon" onclick="viewHistory(${task.id})" title="–ò—Å—Ç–æ—Ä–∏—è">
                                    üìú
                                </button>
                                <button class="btn-icon" onclick="createFromArchived(${task.id})" title="–°–æ–∑–¥–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ">
                                    ‚ûï
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
function openTaskModal(task = null) {
    editingItem = task;
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    
    modalTitle.textContent = task ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è' : '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è';
    
    modalBody.innerHTML = `
        <form id="taskForm" onsubmit="return false;">
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="taskNumber" 
                       value="${task?.number || ''}" 
                       ${task ? 'disabled' : ''}
                       placeholder="2023/001"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="taskName" 
                       value="${task?.name || ''}"
                       placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea class="form-control" 
                          id="taskDescription" 
                          placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è..."
                          rows="4">${task?.description || ''}</textarea>
            </div>
            <div class="form-group">
                <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="form-control" id="taskStatus">
                    <option value="–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" ${task?.status === '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' ? 'selected' : ''}>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</option>
                    <option value="–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ" ${task?.status === '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" ${task?.status === '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞ –ø–ª–∞–Ω—à–µ—Ç)</option>
                    <option value="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" ${task?.status === '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' ? 'selected' : ''}>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</option>
                    <option value="–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" ${task?.status === '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–≥–æ—Ç–æ–≤–æ" ${task?.status === '–≥–æ—Ç–æ–≤–æ' ? 'selected' : ''}>–ì–æ—Ç–æ–≤–æ</option>
                </select>
            </div>
        </form>
    `;
    
    openModal();
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    setTimeout(() => {
        const field = document.getElementById(task ? 'taskName' : 'taskNumber');
        field.focus();
        field.style.transition = 'all 0.3s ease';
        field.style.boxShadow = '0 0 0 4px rgba(99, 102, 241, 0.2)';
        setTimeout(() => {
            field.style.boxShadow = '';
        }, 1000);
    }, 300);
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
function openReceptionModal() {
    editingItem = null;
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    
    modalTitle.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏';
    
    modalBody.innerHTML = `
        <form id="receptionForm" onsubmit="return false;">
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="orderNumber" 
                       placeholder="2023/001"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="designation" 
                       placeholder="–ù–ó.–ö–®.040.25.001"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="receptionName" 
                       placeholder="–ö–æ—Ä–ø—É—Å"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="quantity" 
                       placeholder="20 —à—Ç."
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="routeCardNumber" 
                       placeholder="1243"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="form-control" id="receptionStatus">
                    <option value="–ø—Ä–∏–Ω—è—Ç">–ü—Ä–∏–Ω—è—Ç</option>
                    <option value="–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è">–ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è</option>
                    <option value="–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü">–ü—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü</option>
                </select>
            </div>
        </form>
    `;
    
    openModal();
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
    setTimeout(() => {
        const field = document.getElementById('orderNumber');
        field.focus();
        field.style.transition = 'all 0.3s ease';
        field.style.boxShadow = '0 0 0 4px rgba(99, 102, 241, 0.2)';
        setTimeout(() => {
            field.style.boxShadow = '';
        }, 1000);
    }, 300);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function saveData() {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    const saveButton = document.querySelector('.modal-footer .btn-primary');
    saveButton.disabled = true;
    saveButton.innerHTML = '<span class="spinner-small"></span> –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    
    try {
        if (currentTab === 0) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            const form = document.getElementById('taskForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                saveButton.disabled = false;
                saveButton.innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            const taskData = {
                number: document.getElementById('taskNumber').value.trim(),
                name: document.getElementById('taskName').value.trim(),
                description: document.getElementById('taskDescription').value.trim(),
                status: document.getElementById('taskStatus').value
            };

            let response;
            if (editingItem) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                response = await fetch(`${API_URL}/tasks/${editingItem.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        name: taskData.name,
                        description: taskData.description,
                        status: taskData.status
                    })
                });
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                response = await fetch(`${API_URL}/tasks`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(taskData)
                });
            }

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            showToast('success', '–£—Å–ø–µ—à–Ω–æ', editingItem ? '–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' : '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
        } else if (currentTab === 1) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            const form = document.getElementById('receptionForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                saveButton.disabled = false;
                saveButton.innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏
            const receptionData = {
                order_number: document.getElementById('orderNumber').value.trim(),
                designation: document.getElementById('designation').value.trim(),
                name: document.getElementById('receptionName').value.trim(),
                quantity: document.getElementById('quantity').value.trim(),
                route_card_number: document.getElementById('routeCardNumber').value.trim(),
                status: document.getElementById('receptionStatus').value
            };

            const response = await fetch(`${API_URL}/receptions`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(receptionData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }

        closeModal();
        loadData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
        saveButton.disabled = false;
        saveButton.innerHTML = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function editTask(taskId) {
    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}`);
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
        }
        const task = await response.json();
        openTaskModal(task);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function deleteTask(taskId) {
    // –ö—Ä–∞—Å–∏–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const confirmed = await showConfirmDialog(
        '–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.'
    );
    
    if (!confirmed) return;

    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }

        showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        loadData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏
async function viewHistory(taskId) {
    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}/history`);
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
        }
        const history = await response.json();

        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        const modalFooter = document.getElementById('modalFooter');

        modalTitle.textContent = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏—è';
        
        modalBody.innerHTML = `
            <div style="max-height: 500px; overflow-y: auto;">
                ${history.length === 0 ? '<p class="text-muted">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>' : ''}
                ${history.map((item, index) => `
                    <div style="border-left: 3px solid var(--primary); padding: 1rem 0 1rem 1.5rem; margin-bottom: 1.5rem; position: relative;">
                        <div style="position: absolute; left: -7px; top: 1rem; width: 12px; height: 12px; background: var(--primary); border-radius: 50%; border: 3px solid white;"></div>
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <strong style="color: var(--primary);">${escapeHtml(item.action)}</strong>
                                <div class="text-small text-muted mt-1">
                                    ${formatDateTime(item.timestamp)} ‚Ä¢ ${escapeHtml(item.user)}
                                </div>
                            </div>
                        </div>
                        <div class="mt-1">${escapeHtml(item.details)}</div>
                    </div>
                `).join('')}
            </div>
        `;

        modalFooter.innerHTML = '<button class="btn btn-primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>';

        openModal();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ
function createFromArchived(taskId) {
    const task = archivedTasks.find(t => t.id === taskId);
    if (task) {
        const newTask = {
            ...task,
            number: `${task.number}-–∫–æ–ø–∏—è-${Date.now()}`,
            status: '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        };
        delete newTask.id;
        openTaskModal(newTask);
    }
}

// –ü–æ–∏—Å–∫
function handleSearchKeyPress(event) {
    if (event.key === 'Enter') {
        performSearch();
    }
}

async function performSearch() {
    const searchInput = document.getElementById('searchInput');
    const searchTerm = searchInput.value.trim();

    if (!searchTerm) {
        loadData();
        return;
    }

    // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    searchInput.style.borderColor = var(--primary);
    searchInput.style.boxShadow = '0 0 0 4px rgba(99, 102, 241, 0.2)';

    showLoading();

    try {
        let url = '';
        if (currentTab === 0) {
            url = `${API_URL}/tasks?archived=false&search=${encodeURIComponent(searchTerm)}`;
        } else if (currentTab === 1) {
            url = `${API_URL}/receptions?search=${encodeURIComponent(searchTerm)}`;
        } else if (currentTab === 2) {
            url = `${API_URL}/tasks?archived=true&search=${encodeURIComponent(searchTerm)}`;
        }

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        const data = await response.json();

        if (currentTab === 0) {
            tasks = data;
            renderTasks();
        } else if (currentTab === 1) {
            receptions = data;
            renderReceptions();
        } else if (currentTab === 2) {
            archivedTasks = data;
            renderArchivedTasks();
        }

        if (data.length === 0) {
            showToast('info', '–ü–æ–∏—Å–∫', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
    } finally {
        // –£–±–∏—Ä–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        setTimeout(() => {
            searchInput.style.borderColor = '';
            searchInput.style.boxShadow = '';
        }, 500);
    }
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
function sortTable(column) {
    if (sortColumn === column) {
        sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
        sortColumn = column;
        sortOrder = 'asc';
    }
    loadData();
}

function getSortIndicator(column) {
    if (sortColumn === column) {
        return sortOrder === 'asc' ? '‚ñ≤' : '‚ñº';
    }
    return '‚áÖ';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

function formatDateTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getStatusBadge(status) {
    const statusMap = {
        '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ': 'development',
        '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ': 'prepared',
        '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ': 'sent',
        '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 'in-progress',
        '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ': 'stopped',
        '–≥–æ—Ç–æ–≤–æ': 'done',
        '–ø—Ä–∏–Ω—è—Ç': 'accepted',
        '–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è': 'remarks',
        '–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü': 'processed'
    };
    
    const className = statusMap[status] || '';
    return `<span class="status status-${className}">
                <span class="status-dot"></span>
                ${escapeHtml(status)}
            </span>`;
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}

function showLoading() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
    `;
}

function showError(message) {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">‚ö†Ô∏è</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${escapeHtml(message)}</p>
            <button class="btn btn-primary mt-2" onclick="loadData()">
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
        </div>
    `;
}