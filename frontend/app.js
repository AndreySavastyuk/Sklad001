// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTab = 0;
let tasks = [];
let receptions = [];
let archivedTasks = [];
let sortColumn = 'created_date';
let sortOrder = 'desc';
let editingItem = null;

// API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = window.location.origin;
const API_URL = `${API_BASE_URL}/api`;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    loadData();
    updateToolbar();
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(archiveOldTasks, 24 * 60 * 60 * 1000);
});

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabIndex) {
    currentTab = tabIndex;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach((tab, index) => {
        tab.classList.toggle('active', index === tabIndex);
    });

    // –°–±—Ä–æ—Å –ø–æ–∏—Å–∫–∞
    document.getElementById('searchInput').value = '';
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    updateToolbar();
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loadData();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
function updateToolbar() {
    const toolbarButtons = document.getElementById('toolbarButtons');
    toolbarButtons.innerHTML = '';

    if (currentTab === 0) {
        toolbarButtons.innerHTML = `
            <button class="btn btn-primary" onclick="openTaskModal()">
                <span>‚ûï</span> –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
            </button>
            <button class="btn btn-secondary" onclick="importExcel()">
                <span>üì•</span> –ò–º–ø–æ—Ä—Ç Excel
            </button>
        `;
    } else if (currentTab === 1) {
        toolbarButtons.innerHTML = `
            <button class="btn btn-primary" onclick="openReceptionModal()">
                <span>‚ûï</span> –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º–∫—É
            </button>
        `;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function loadData() {
    showLoading();
    
    try {
        let url = '';
        if (currentTab === 0) {
            url = `${API_URL}/tasks?archived=false&sort_by=${sortColumn}&sort_order=${sortOrder}`;
        } else if (currentTab === 1) {
            url = `${API_URL}/receptions`;
        } else if (currentTab === 2) {
            url = `${API_URL}/tasks?archived=true&sort_by=${sortColumn}&sort_order=${sortOrder}`;
        }

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();

        if (currentTab === 0) {
            tasks = data;
            renderTasks();
        } else if (currentTab === 1) {
            receptions = data;
            renderReceptions();
        } else if (currentTab === 2) {
            archivedTasks = data;
            renderArchivedTasks();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
function renderTasks() {
    const content = document.getElementById('content');
    
    if (tasks.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìã</div>
                <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"</p>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th onclick="sortTable('number')">
                            –ù–æ–º–µ—Ä <span class="sort-indicator">${getSortIndicator('number')}</span>
                        </th>
                        <th onclick="sortTable('name')">
                            –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="sort-indicator">${getSortIndicator('name')}</span>
                        </th>
                        <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                        <th onclick="sortTable('status')">
                            –°—Ç–∞—Ç—É—Å <span class="sort-indicator">${getSortIndicator('status')}</span>
                        </th>
                        <th onclick="sortTable('created_date')">
                            –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è <span class="sort-indicator">${getSortIndicator('created_date')}</span>
                        </th>
                        <th style="width: 100px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${tasks.map(task => `
                        <tr class="clickable" ondblclick="editTask(${task.id})">
                            <td><strong>${escapeHtml(task.number)}</strong></td>
                            <td>${escapeHtml(task.name)}</td>
                            <td>${escapeHtml(task.description || '‚Äî')}</td>
                            <td>${getStatusBadge(task.status)}</td>
                            <td>${formatDate(task.created_date)}</td>
                            <td onclick="event.stopPropagation()">
                                <div class="action-buttons">
                                    <button class="btn-icon" onclick="editTask(${task.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                        ‚úèÔ∏è
                                    </button>
                                    <button class="btn-icon" onclick="deleteTask(${task.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                        üóëÔ∏è
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–µ–º–æ–∫
function renderReceptions() {
    const content = document.getElementById('content');
    
    if (receptions.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üì¶</div>
                <h3>–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏–µ–º–∫–µ</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ —Ç–æ–≤–∞—Ä–æ–≤</p>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th>–î–∞—Ç–∞</th>
                        <th>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞</th>
                        <th>–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ</th>
                        <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                        <th>‚Ññ –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                    </tr>
                </thead>
                <tbody>
                    ${receptions.map(reception => `
                        <tr>
                            <td>${formatDate(reception.date)}</td>
                            <td><strong>${escapeHtml(reception.order_number)}</strong></td>
                            <td>${escapeHtml(reception.designation)}</td>
                            <td>${escapeHtml(reception.name)}</td>
                            <td>${escapeHtml(reception.quantity)}</td>
                            <td>${escapeHtml(reception.route_card_number)}</td>
                            <td>${getStatusBadge(reception.status)}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
function renderArchivedTasks() {
    const content = document.getElementById('content');
    
    if (archivedTasks.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üóÑÔ∏è</div>
                <h3>–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç</h3>
                <p>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ø–∞–¥—É—Ç —Å—é–¥–∞ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π</p>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th>–ù–æ–º–µ—Ä</th>
                        <th>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è</th>
                        <th>–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</th>
                        <th style="width: 100px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    ${archivedTasks.map(task => `
                        <tr class="clickable" ondblclick="viewHistory(${task.id})">
                            <td><strong>${escapeHtml(task.number)}</strong></td>
                            <td>${escapeHtml(task.name)}</td>
                            <td>${getStatusBadge(task.status)}</td>
                            <td>${formatDate(task.created_date)}</td>
                            <td>${task.completed_date ? formatDate(task.completed_date) : '‚Äî'}</td>
                            <td onclick="event.stopPropagation()">
                                <div class="action-buttons">
                                    <button class="btn-icon" onclick="viewHistory(${task.id})" title="–ò—Å—Ç–æ—Ä–∏—è">
                                        üìú
                                    </button>
                                    <button class="btn-icon" onclick="createFromArchived(${task.id})" title="–°–æ–∑–¥–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ">
                                        ‚ûï
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>
    `;
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
function openTaskModal(task = null) {
    editingItem = task;
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    
    modalTitle.textContent = task ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è' : '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è';
    
    modalBody.innerHTML = `
        <form id="taskForm" onsubmit="return false;">
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="taskNumber" 
                       value="${task?.number || ''}" 
                       ${task ? 'disabled' : ''}
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="taskName" 
                       value="${task?.name || ''}"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                <textarea class="form-control" 
                          id="taskDescription" 
                          rows="3">${task?.description || ''}</textarea>
            </div>
            <div class="form-group">
                <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="form-control" id="taskStatus">
                    <option value="–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" ${task?.status === '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ' ? 'selected' : ''}>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</option>
                    <option value="–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ" ${task?.status === '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" ${task?.status === '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–∞ –ø–ª–∞–Ω—à–µ—Ç)</option>
                    <option value="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è" ${task?.status === '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' ? 'selected' : ''}>–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</option>
                    <option value="–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" ${task?.status === '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' ? 'selected' : ''}>–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–≥–æ—Ç–æ–≤–æ" ${task?.status === '–≥–æ—Ç–æ–≤–æ' ? 'selected' : ''}>–ì–æ—Ç–æ–≤–æ</option>
                </select>
            </div>
        </form>
    `;
    
    openModal();
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
    setTimeout(() => {
        document.getElementById(task ? 'taskName' : 'taskNumber').focus();
    }, 100);
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–∏–µ–º–∫–∏
function openReceptionModal() {
    editingItem = null;
    const modalTitle = document.getElementById('modalTitle');
    const modalBody = document.getElementById('modalBody');
    
    modalTitle.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏';
    
    modalBody.innerHTML = `
        <form id="receptionForm" onsubmit="return false;">
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="orderNumber" 
                       placeholder="2023/001"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="designation" 
                       placeholder="–ù–ó.–ö–®.040.25.001"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="receptionName" 
                       placeholder="–ö–æ—Ä–ø—É—Å"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="quantity" 
                       placeholder="20 —à—Ç."
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã <span class="required">*</span></label>
                <input type="text" 
                       class="form-control" 
                       id="routeCardNumber" 
                       placeholder="1243"
                       required>
            </div>
            <div class="form-group">
                <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="form-control" id="receptionStatus">
                    <option value="–ø—Ä–∏–Ω—è—Ç">–ü—Ä–∏–Ω—è—Ç</option>
                    <option value="–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è">–ï—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è</option>
                    <option value="–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü">–ü—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü</option>
                </select>
            </div>
        </form>
    `;
    
    openModal();
    // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–æ–ª–µ
    setTimeout(() => {
        document.getElementById('orderNumber').focus();
    }, 100);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function saveData() {
    try {
        if (currentTab === 0) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            const form = document.getElementById('taskForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            const taskData = {
                number: document.getElementById('taskNumber').value.trim(),
                name: document.getElementById('taskName').value.trim(),
                description: document.getElementById('taskDescription').value.trim(),
                status: document.getElementById('taskStatus').value
            };

            let response;
            if (editingItem) {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                response = await fetch(`${API_URL}/tasks/${editingItem.id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        name: taskData.name,
                        description: taskData.description,
                        status: taskData.status
                    })
                });
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                response = await fetch(`${API_URL}/tasks`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(taskData)
                });
            }

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            showToast('success', '–£—Å–ø–µ—à–Ω–æ', editingItem ? '–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ' : '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ');
        } else if (currentTab === 1) {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
            const form = document.getElementById('receptionForm');
            if (!form.checkValidity()) {
                form.reportValidity();
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∫–∏
            const receptionData = {
                order_number: document.getElementById('orderNumber').value.trim(),
                designation: document.getElementById('designation').value.trim(),
                name: document.getElementById('receptionName').value.trim(),
                quantity: document.getElementById('quantity').value.trim(),
                route_card_number: document.getElementById('routeCardNumber').value.trim(),
                status: document.getElementById('receptionStatus').value
            };

            const response = await fetch(`${API_URL}/receptions`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(receptionData)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            }

            showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–ø–∏—Å—å –æ –ø—Ä–∏–µ–º–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        }

        closeModal();
        loadData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function editTask(taskId) {
    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}`);
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
        }
        const task = await response.json();
        openTaskModal(task);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function deleteTask(taskId) {
    if (!confirm('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?')) {
        return;
    }

    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}`, {
            method: 'DELETE'
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }

        showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        loadData();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
    }
}

// –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏
async function viewHistory(taskId) {
    try {
        const response = await fetch(`${API_URL}/tasks/${taskId}/history`);
        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
        }
        const history = await response.json();

        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');
        const modalFooter = document.getElementById('modalFooter');

        modalTitle.textContent = '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏—è';
        
        modalBody.innerHTML = `
            <div style="max-height: 400px; overflow-y: auto;">
                ${history.length === 0 ? '<p class="text-muted">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—É—Å—Ç–∞</p>' : ''}
                ${history.map((item, index) => `
                    <div style="border-bottom: 1px solid var(--border); padding: 1rem 0;">
                        <div style="display: flex; justify-content: space-between; align-items: start;">
                            <div>
                                <strong>${escapeHtml(item.action)}</strong>
                                <div class="text-small text-muted mt-1">
                                    ${formatDateTime(item.timestamp)} ‚Ä¢ ${escapeHtml(item.user)}
                                </div>
                            </div>
                        </div>
                        <div class="mt-1">${escapeHtml(item.details)}</div>
                    </div>
                `).join('')}
            </div>
        `;

        modalFooter.innerHTML = '<button class="btn btn-primary" onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>';

        openModal();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä—Ö–∏–≤–Ω–æ–≥–æ
function createFromArchived(taskId) {
    const task = archivedTasks.find(t => t.id === taskId);
    if (task) {
        const newTask = {
            ...task,
            number: `${task.number}-–∫–æ–ø–∏—è-${Date.now()}`,
            status: '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ'
        };
        delete newTask.id;
        openTaskModal(newTask);
    }
}

// –ü–æ–∏—Å–∫
function handleSearchKeyPress(event) {
    if (event.key === 'Enter') {
        performSearch();
    }
}

async function performSearch() {
    const searchInput = document.getElementById('searchInput');
    const searchTerm = searchInput.value.trim();

    if (!searchTerm) {
        loadData();
        return;
    }

    showLoading();

    try {
        let url = '';
        if (currentTab === 0) {
            url = `${API_URL}/tasks?archived=false&search=${encodeURIComponent(searchTerm)}`;
        } else if (currentTab === 1) {
            url = `${API_URL}/receptions?search=${encodeURIComponent(searchTerm)}`;
        } else if (currentTab === 2) {
            url = `${API_URL}/tasks?archived=true&search=${encodeURIComponent(searchTerm)}`;
        }

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
        }
        const data = await response.json();

        if (currentTab === 0) {
            tasks = data;
            renderTasks();
        } else if (currentTab === 1) {
            receptions = data;
            renderReceptions();
        } else if (currentTab === 2) {
            archivedTasks = data;
            renderArchivedTasks();
        }

        if (data.length === 0) {
            showToast('info', '–ü–æ–∏—Å–∫', '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
    }
}

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
function sortTable(column) {
    if (sortColumn === column) {
        sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
    } else {
        sortColumn = column;
        sortOrder = 'asc';
    }
    loadData();
}

function getSortIndicator(column) {
    if (sortColumn === column) {
        return sortOrder === 'asc' ? '‚ñ≤' : '‚ñº';
    }
    return '‚Üï';
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
    });
}

function formatDateTime(dateString) {
    const date = new Date(dateString);
    return date.toLocaleString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

function getStatusBadge(status) {
    const statusMap = {
        '–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ': 'development',
        '–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ': 'prepared',
        '–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ': 'sent',
        '–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è': 'in-progress',
        '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ': 'stopped',
        '–≥–æ—Ç–æ–≤–æ': 'done',
        '–ø—Ä–∏–Ω—è—Ç': 'accepted',
        '–µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è': 'remarks',
        '–ø—Ä–æ–≤–µ–¥–µ–Ω –≤ –ù–ü': 'processed'
    };
    
    const className = statusMap[status] || '';
    return `<span class="status status-${className}">
                <span class="status-dot"></span>
                ${escapeHtml(status)}
            </span>`;
}

function escapeHtml(text) {
    const map = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return String(text).replace(/[&<>"']/g, m => map[m]);
}

function showLoading() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p class="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
        </div>
    `;
}

function showError(message) {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="empty-state">
            <div class="empty-state-icon">‚ö†Ô∏è</div>
            <h3>–û—à–∏–±–∫–∞</h3>
            <p>${escapeHtml(message)}</p>
            <button class="btn btn-primary mt-2" onclick="loadData()">
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
        </div>
    `;
}

// –†–∞–±–æ—Ç–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
function openModal() {
    const modal = document.getElementById('modal');
    modal.classList.add('show');
    document.body.style.overflow = 'hidden';
}

function closeModal() {
    const modal = document.getElementById('modal');
    modal.classList.remove('show');
    document.body.style.overflow = '';
    editingItem = null;
}

function handleModalClick(event) {
    if (event.target === event.currentTarget) {
        closeModal();
    }
}

// –¢–æ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showToast(type, title, message) {
    const toast = document.getElementById('toast');
    const toastIcon = document.getElementById('toastIcon');
    const toastTitle = document.getElementById('toastTitle');
    const toastMessage = document.getElementById('toastMessage');

    // –°–±—Ä–æ—Å –∫–ª–∞—Å—Å–æ–≤
    toast.className = 'toast';
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞
    toast.classList.add(`toast-${type}`);
    
    // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        info: '‚ÑπÔ∏è',
        warning: '‚ö†Ô∏è'
    };
    
    toastIcon.textContent = icons[type] || icons.info;
    toastTitle.textContent = title;
    toastMessage.textContent = message;
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    toast.classList.add('show');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        toast.classList.remove('show');
    }, 3000);
}

// –ò–º–ø–æ—Ä—Ç Excel
function importExcel() {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.xlsx,.xls';
    input.onchange = async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const formData = new FormData();
        formData.append('file', file);

        try {
            showToast('info', '–ò–º–ø–æ—Ä—Ç', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...');
            
            const response = await fetch(`${API_URL}/tasks/import`, {
                method: 'POST',
                body: formData
            });
            
            const result = await response.json();
            
            if (!response.ok) {
                throw new Error(result.detail || '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞');
            }
            
            showToast('success', '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 
                `–°–æ–∑–¥–∞–Ω–æ: ${result.created}, –û—à–∏–±–æ–∫: ${result.errors.length}`);
            
            if (result.errors.length > 0) {
                console.warn('–û—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞:', result.errors);
            }
            
            loadData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error);
            showToast('error', '–û—à–∏–±–∫–∞', error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª');
        }
    };
    input.click();
}

// –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π
async function archiveOldTasks() {
    try {
        const response = await fetch(`${API_URL}/tasks/archive`, {
            method: 'POST'
        });
        const result = await response.json();
        
        if (result.archived_count > 0) {
            console.log(`–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${result.archived_count}`);
            if (currentTab === 0 || currentTab === 2) {
                loadData();
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', error);
    }
}

// –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
document.addEventListener('keydown', function(event) {
    // Escape - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    if (event.key === 'Escape') {
        const modal = document.getElementById('modal');
        if (modal.classList.contains('show')) {
            closeModal();
        }
    }
    
    // Ctrl+N - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    if (event.ctrlKey && event.key === 'n') {
        event.preventDefault();
        if (currentTab === 0) {
            openTaskModal();
        } else if (currentTab === 1) {
            openReceptionModal();
        }
    }
    
    // Ctrl+F - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
    if (event.ctrlKey && event.key === 'f') {
        event.preventDefault();
        document.getElementById('searchInput').focus();
    }
}); 