// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º
// –ù–æ–≤—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let selectedTasks = new Set();
let currentFilters = {};
let savedFilters = [];
let tasksStats = {};
let autoRefreshInterval = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
document.addEventListener('DOMContentLoaded', function() {
    startAutoRefresh();
    loadSavedFilters();
    loadTasksStats();
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
function startAutoRefresh() {
    autoRefreshInterval = setInterval(() => {
        loadData();
        loadTasksStats();
    }, 30000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞–Ω–∏–π
async function loadTasksStats() {
    try {
        const response = await fetch(`${API_URL}/tasks/stats`);
        if (response.ok) {
            tasksStats = await response.json();
            updateTabCounters();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –≤–∫–ª–∞–¥–∫–∞—Ö
function updateTabCounters() {
    const tasksCounter = document.getElementById('tasksCounter');
    const receptionsCounter = document.getElementById('receptionsCounter');
    const archiveCounter = document.getElementById('archiveCounter');
    
    if (tasksStats.total_tasks !== undefined) {
        tasksCounter.textContent = tasksStats.total_tasks;
        tasksCounter.style.display = tasksStats.total_tasks > 0 ? 'inline' : 'none';
        
        // –ö—Ä–∞—Å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if (tasksStats.overdue_count > 0) {
            tasksCounter.style.background = 'var(--danger)';
            tasksCounter.title = `${tasksStats.overdue_count} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π`;
        } else {
            tasksCounter.style.background = '';
            tasksCounter.title = '';
        }
    }
    
    if (receptions.length > 0) {
        receptionsCounter.textContent = receptions.length;
        receptionsCounter.style.display = 'inline';
    } else {
        receptionsCounter.style.display = 'none';
    }
    
    if (archivedTasks.length > 0) {
        archiveCounter.textContent = archivedTasks.length;
        archiveCounter.style.display = 'inline';
    } else {
        archiveCounter.style.display = 'none';
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏ –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
function renderTasksExtended() {
    const content = document.getElementById('content');
    
    if (tasks.length === 0) {
        content.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üìã</div>
                <h3>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ"</p>
                <button class="btn btn-primary" onclick="openTaskModal()">
                    <span>‚ûï</span> –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
                </button>
            </div>
        `;
        return;
    }

    content.innerHTML = `
        <table>
            <thead>
                <tr>
                    <th style="width: 40px;">
                        <input type="checkbox" class="checkbox" id="selectAll" onchange="toggleSelectAll()">
                    </th>
                    <th onclick="sortTable('number')">
                        –ù–æ–º–µ—Ä <span class="sort-indicator">${getSortIndicator('number')}</span>
                    </th>
                    <th onclick="sortTable('name')">
                        –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ <span class="sort-indicator">${getSortIndicator('name')}</span>
                    </th>
                    <th onclick="sortTable('priority')">
                        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç <span class="sort-indicator">${getSortIndicator('priority')}</span>
                    </th>
                    <th onclick="sortTable('responsible')">
                        –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π <span class="sort-indicator">${getSortIndicator('responsible')}</span>
                    </th>
                    <th onclick="sortTable('due_date')">
                        –°—Ä–æ–∫ <span class="sort-indicator">${getSortIndicator('due_date')}</span>
                    </th>
                    <th onclick="sortTable('status')">
                        –°—Ç–∞—Ç—É—Å <span class="sort-indicator">${getSortIndicator('status')}</span>
                    </th>
                    <th onclick="sortTable('created_date')">
                        –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è <span class="sort-indicator">${getSortIndicator('created_date')}</span>
                    </th>
                    <th style="width: 120px;">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
            </thead>
            <tbody>
                ${tasks.map((task, index) => {
                    const isOverdue = task.due_date && new Date(task.due_date) < new Date() && task.status !== '–≥–æ—Ç–æ–≤–æ';
                    const rowClass = isOverdue ? 'overdue-row' : '';
                    
                    return `
                        <tr class="${rowClass}" ondblclick="editTask(${task.id})" 
                            style="animation: fadeInUp 0.3s ease ${index * 0.05}s both">
                            <td onclick="event.stopPropagation()">
                                <input type="checkbox" class="checkbox task-checkbox" 
                                       value="${task.id}" onchange="toggleTaskSelection(${task.id})">
                            </td>
                            <td><strong>${escapeHtml(task.number)}</strong></td>
                            <td>
                                ${escapeHtml(task.name)}
                                ${task.attachments ? '<span style="color: var(--info);">üìé</span>' : ''}
                            </td>
                            <td>${getPriorityBadge(task.priority)}</td>
                            <td>${escapeHtml(task.responsible || '‚Äî')}</td>
                            <td>
                                ${task.due_date ? formatDate(task.due_date) : '‚Äî'}
                                ${isOverdue ? '<span class="overdue-indicator">‚ö†Ô∏è</span>' : ''}
                            </td>
                            <td>${getStatusBadge(task.status)}</td>
                            <td>${formatDate(task.created_date)}</td>
                            <td onclick="event.stopPropagation()">
                                <div class="action-buttons">
                                    <button class="btn-icon" onclick="editTask(${task.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                        ‚úèÔ∏è
                                    </button>
                                    <button class="btn-icon" onclick="deleteTask(${task.id})" title="–£–¥–∞–ª–∏—Ç—å">
                                        üóëÔ∏è
                                    </button>
                                    <button class="btn-icon" onclick="viewHistory(${task.id})" title="–ò—Å—Ç–æ—Ä–∏—è">
                                        üìú
                                    </button>
                                </div>
                            </td>
                        </tr>
                    `;
                }).join('')}
            </tbody>
        </table>
    `;
    
    updateCheckboxStates();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getPriorityBadge(priority) {
    return `<span class="priority priority-${priority}">${escapeHtml(priority)}</span>`;
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏–π
function toggleTaskSelection(taskId) {
    if (selectedTasks.has(taskId)) {
        selectedTasks.delete(taskId);
    } else {
        selectedTasks.add(taskId);
    }
    updateBulkActions();
    updateCheckboxStates();
}

function toggleSelectAll() {
    const selectAllCheckbox = document.getElementById('selectAll');
    const taskCheckboxes = document.querySelectorAll('.task-checkbox');
    
    if (selectAllCheckbox.checked) {
        taskCheckboxes.forEach(checkbox => {
            const taskId = parseInt(checkbox.value);
            selectedTasks.add(taskId);
            checkbox.checked = true;
        });
    } else {
        selectedTasks.clear();
        taskCheckboxes.forEach(checkbox => {
            checkbox.checked = false;
        });
    }
    
    updateBulkActions();
}

function selectAllTasks() {
    tasks.forEach(task => selectedTasks.add(task.id));
    updateBulkActions();
    updateCheckboxStates();
}

function clearSelection() {
    selectedTasks.clear();
    updateBulkActions();
    updateCheckboxStates();
}

function updateCheckboxStates() {
    const selectAllCheckbox = document.getElementById('selectAll');
    const taskCheckboxes = document.querySelectorAll('.task-checkbox');
    
    if (selectAllCheckbox) {
        const allSelected = taskCheckboxes.length > 0 && 
                           Array.from(taskCheckboxes).every(cb => selectedTasks.has(parseInt(cb.value)));
        selectAllCheckbox.checked = allSelected;
    }
    
    taskCheckboxes.forEach(checkbox => {
        checkbox.checked = selectedTasks.has(parseInt(checkbox.value));
    });
}

function updateBulkActions() {
    const bulkActions = document.getElementById('bulkActions');
    const selectedCount = document.getElementById('selectedCount');
    
    if (selectedTasks.size > 0) {
        bulkActions.classList.add('show');
        selectedCount.textContent = selectedTasks.size;
    } else {
        bulkActions.classList.remove('show');
    }
}

// –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
async function applyBulkUpdate() {
    if (selectedTasks.size === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    const statusSelect = document.getElementById('bulkStatusSelect');
    const prioritySelect = document.getElementById('bulkPrioritySelect');
    
    const updateData = {
        task_ids: Array.from(selectedTasks)
    };
    
    if (statusSelect.value) updateData.status = statusSelect.value;
    if (prioritySelect.value) updateData.priority = prioritySelect.value;
    
    if (!statusSelect.value && !prioritySelect.value) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å');
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/tasks/bulk-update`, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(updateData)
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
        
        const result = await response.json();
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', result.message);
        
        clearSelection();
        statusSelect.value = '';
        prioritySelect.value = '';
        loadData();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    }
}

async function bulkDeleteTasks() {
    if (selectedTasks.size === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è');
        return;
    }
    
    const confirmed = await showConfirmDialog(
        '–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ',
        `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${selectedTasks.size} –∑–∞–¥–∞–Ω–∏–π? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
    );
    
    if (!confirmed) return;
    
    try {
        const response = await fetch(`${API_URL}/tasks/bulk-delete`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(Array.from(selectedTasks))
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        
        const result = await response.json();
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', result.message);
        
        clearSelection();
        loadData();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ');
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
function toggleFilters() {
    const filtersPanel = document.getElementById('filtersPanel');
    const filtersToggle = document.getElementById('filtersToggle');
    
    if (filtersPanel.classList.contains('show')) {
        filtersPanel.classList.remove('show');
        filtersToggle.innerHTML = '<span>üîç</span> –§–∏–ª—å—Ç—Ä—ã';
    } else {
        filtersPanel.classList.add('show');
        filtersToggle.innerHTML = '<span>üîç</span> –°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã';
        setupFiltersPanel();
    }
}

function setupFiltersPanel() {
    const filtersGrid = document.getElementById('filtersGrid');
    
    if (currentTab === 0) {
        filtersGrid.innerHTML = `
            <div class="filter-group">
                <label class="filter-label">–°—Ç–∞—Ç—É—Å</label>
                <select class="filter-select" id="filterStatus">
                    <option value="">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                    <option value="–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ">–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</option>
                    <option value="–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ">–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</option>
                    <option value="–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è">–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è</option>
                    <option value="–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ">–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</option>
                    <option value="–≥–æ—Ç–æ–≤–æ">–ì–æ—Ç–æ–≤–æ</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                <select class="filter-select" id="filterPriority">
                    <option value="">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                    <option value="–Ω–∏–∑–∫–∏–π">–ù–∏–∑–∫–∏–π</option>
                    <option value="—Å—Ä–µ–¥–Ω–∏–π">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="–≤—ã—Å–æ–∫–∏–π">–í—ã—Å–æ–∫–∏–π</option>
                    <option value="—Å—Ä–æ—á–Ω—ã–π">–°—Ä–æ—á–Ω—ã–π</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π</label>
                <input type="text" class="filter-input" id="filterResponsible" placeholder="–ò–º—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ">
            </div>
            <div class="filter-group">
                <label class="filter-label">–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</label>
                <select class="filter-select" id="filterOverdue">
                    <option value="">–í—Å–µ –∑–∞–¥–∞–Ω–∏—è</option>
                    <option value="true">–¢–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</option>
                    <option value="false">–ù–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ</option>
                </select>
            </div>
        `;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    Object.keys(currentFilters).forEach(key => {
        const element = document.getElementById(`filter${key.charAt(0).toUpperCase() + key.slice(1)}`);
        if (element) {
            element.value = currentFilters[key] || '';
        }
    });
}

function applyFilters() {
    currentFilters = {};
    
    const filterElements = document.querySelectorAll('#filtersGrid .filter-select, #filtersGrid .filter-input');
    filterElements.forEach(element => {
        const filterName = element.id.replace('filter', '').toLowerCase();
        if (element.value) {
            currentFilters[filterName] = element.value;
        }
    });
    
    loadData();
    showToast('info', '–§–∏–ª—å—Ç—Ä—ã', '–§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
}

function clearFilters() {
    currentFilters = {};
    const filterElements = document.querySelectorAll('#filtersGrid .filter-select, #filtersGrid .filter-input');
    filterElements.forEach(element => {
        element.value = '';
    });
    loadData();
    showToast('info', '–§–∏–ª—å—Ç—Ä—ã', '–§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async function saveCurrentFilter() {
    if (Object.keys(currentFilters).length === 0) {
        showToast('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        return;
    }
    
    const name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞:');
    if (!name) return;
    
    try {
        const response = await fetch(`${API_URL}/filters`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name: name,
                filter_data: JSON.stringify(currentFilters)
            })
        });
        
        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞');
        }
        
        showToast('success', '–£—Å–ø–µ—à–Ω–æ', '–§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
        loadSavedFilters();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showToast('error', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä');
    }
}

async function loadSavedFilters() {
    try {
        const response = await fetch(`${API_URL}/filters`);
        if (response.ok) {
            savedFilters = await response.json();
            updateSavedFiltersSelect();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤:', error);
    }
}

function updateSavedFiltersSelect() {
    const select = document.getElementById('savedFilters');
    if (!select) return;
    
    select.innerHTML = '<option value="">–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã</option>';
    savedFilters.forEach(filter => {
        const option = document.createElement('option');
        option.value = filter.id;
        option.textContent = filter.name;
        select.appendChild(option);
    });
}

function loadSavedFilter() {
    const select = document.getElementById('savedFilters');
    const filterId = select.value;
    
    if (!filterId) return;
    
    const filter = savedFilters.find(f => f.id == filterId);
    if (filter) {
        currentFilters = JSON.parse(filter.filter_data);
        setupFiltersPanel();
        loadData();
        showToast('info', '–§–∏–ª—å—Ç—Ä', `–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä "${filter.name}"`);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
window.toggleFilters = toggleFilters;
window.applyFilters = applyFilters;
window.clearFilters = clearFilters;
window.saveCurrentFilter = saveCurrentFilter;
window.loadSavedFilter = loadSavedFilter;
window.toggleTaskSelection = toggleTaskSelection;
window.toggleSelectAll = toggleSelectAll;
window.selectAllTasks = selectAllTasks;
window.clearSelection = clearSelection;
window.applyBulkUpdate = applyBulkUpdate;
window.bulkDeleteTasks = bulkDeleteTasks;
window.renderTasksExtended = renderTasksExtended; 